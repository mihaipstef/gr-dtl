/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_equalizer_adaptive.h) */
/* BINDTOOL_HEADER_FILE_HASH(cfe125581e3204d3dd9608559bdd586c)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/ofdm_equalizer_adaptive.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_equalizer_adaptive_pydoc.h>

void bind_ofdm_equalizer_adaptive(py::module& m)
{

    using ofdm_equalizer_adaptive = ::gr::dtl::ofdm_equalizer_adaptive;

    py::class_<ofdm_equalizer_adaptive,
               gr::digital::ofdm_equalizer_1d_pilots,
               std::shared_ptr<ofdm_equalizer_adaptive>>(
        m, "ofdm_equalizer_adaptive", D(ofdm_equalizer_adaptive))

        .def(py::init(&ofdm_equalizer_adaptive::make),
             py::arg("fft_len"),
             py::arg("constellations"),
             py::arg("occupied_carriers") = std::vector<std::vector<int>>(),
             py::arg("pilot_carriers") = std::vector<std::vector<int>>(),
             py::arg("pilot_symbols") = std::vector<std::vector<gr_complex>>(),
             py::arg("symbols_skipped") = 0,
             py::arg("alpha") = 0.10000000000000001,
             py::arg("input_is_shifted") = true,
             py::arg("enable_soft_output") = false,
             D(ofdm_equalizer_adaptive, make))


        .def("equalize",
             &ofdm_equalizer_adaptive::equalize,
             py::arg("frame"),
             py::arg("n_sym"),
             py::arg("initial_taps") = std::vector<gr_complex>(),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(ofdm_equalizer_adaptive, equalize))


        ;
}
