/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(fec.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(98cc92635ceba81ef38016d58fbd1b36)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/fec.h>
// pydoc.h is automatically generated in the build directory
#include <fec_pydoc.h>

void bind_fec(py::module& m)
{

    using fec_enc = ::gr::dtl::fec_enc;
    using fec_dec = ::gr::dtl::fec_dec;


    py::class_<fec_enc, std::shared_ptr<fec_enc>>(m, "fec_enc", D(fec_enc))

        // .def(py::init<>(), D(fec_enc, fec_enc, 0))
        // .def(py::init<gr::dtl::fec_enc const&>(), py::arg("arg0"), D(fec_enc, fec_enc, 1))


        .def("encode",
             &fec_enc::encode,
             py::arg("in_data"),
             py::arg("len"),
             py::arg("out_data"),
             D(fec_enc, encode))


        .def("get_k", &fec_enc::get_k, D(fec_enc, get_k))


        .def("get_n", &fec_enc::get_n, D(fec_enc, get_n))

        ;


    py::class_<fec_dec, std::shared_ptr<fec_dec>>(m, "fec_dec", D(fec_dec))

        // .def(py::init<>(), D(fec_dec, fec_dec, 0))
        // .def(py::init<gr::dtl::fec_dec const&>(), py::arg("arg0"), D(fec_dec, fec_dec, 1))


        .def("decode",
             &fec_dec::decode,
             py::arg("in_data"),
             py::arg("nit"),
             py::arg("out_data"),
             D(fec_dec, decode))


        .def("get_k", &fec_dec::get_k, D(fec_dec, get_k))


        .def("get_n", &fec_dec::get_n, D(fec_dec, get_n))

        ;


    m.def("make_ldpc_encoders",
          &::gr::dtl::make_ldpc_encoders,
          py::arg("alist_fnames"),
          D(make_ldpc_encoders));


    m.def("make_ldpc_decoders",
          &::gr::dtl::make_ldpc_decoders,
          py::arg("alist_fnames"),
          D(make_ldpc_decoders));
}
