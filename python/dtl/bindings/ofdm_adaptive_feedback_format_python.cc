/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_adaptive_feedback_format.h) */
/* BINDTOOL_HEADER_FILE_HASH(25e3072cc65e98ffeff03894d47a1ad1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/ofdm_adaptive_feedback_format.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_adaptive_feedback_format_pydoc.h>

void bind_ofdm_adaptive_feedback_format(py::module& m)
{

    using ofdm_adaptive_feedback_format = ::gr::dtl::ofdm_adaptive_feedback_format;


    py::class_<ofdm_adaptive_feedback_format,
               gr::digital::header_format_base,
               std::shared_ptr<ofdm_adaptive_feedback_format>>(
        m, "ofdm_adaptive_feedback_format", D(ofdm_adaptive_feedback_format))

        .def(py::init(&ofdm_adaptive_feedback_format::make),
             py::arg("access_code"),
             py::arg("threshold"),
             D(ofdm_adaptive_feedback_format, make))


        .def("format",
             &ofdm_adaptive_feedback_format::format,
             py::arg("nbytes_in"),
             py::arg("input"),
             py::arg("output"),
             py::arg("info"),
             D(ofdm_adaptive_feedback_format, format))


        .def("parse",
             &ofdm_adaptive_feedback_format::parse,
             py::arg("nbits_in"),
             py::arg("input"),
             py::arg("info"),
             py::arg("nbits_processed"),
             D(ofdm_adaptive_feedback_format, parse))


        .def("header_nbits",
             &ofdm_adaptive_feedback_format::header_nbits,
             D(ofdm_adaptive_feedback_format, header_nbits))


        .def("access_code",
             &ofdm_adaptive_feedback_format::access_code,
             D(ofdm_adaptive_feedback_format, access_code))


        .def("threshold",
             &ofdm_adaptive_feedback_format::threshold,
             D(ofdm_adaptive_feedback_format, threshold))


        ;
}
