/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(packet_validator.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(274e40772edc82e9c3df78bddc8b3da1)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/packet_validator.h>
// pydoc.h is automatically generated in the build directory
#include <packet_validator_pydoc.h>

void bind_packet_validator(py::module& m)
{

    using packet_validator = ::gr::dtl::packet_validator;
    using ip_validator = ::gr::dtl::ip_validator;
    using ethernet_validator = ::gr::dtl::ethernet_validator;


    py::class_<packet_validator, std::shared_ptr<packet_validator>>(
        m, "packet_validator", D(packet_validator))

     //    .def(py::init<gr::dtl::packet_validator const&>(),
     //         py::arg("arg0"),
     //         D(packet_validator, packet_validator, 0))
     //    .def(py::init<>(), D(packet_validator, packet_validator, 1))


        .def("valid",
             &packet_validator::valid,
             py::arg("buf"),
             py::arg("len"),
             D(packet_validator, valid))

        ;


    py::class_<ip_validator, gr::dtl::packet_validator, std::shared_ptr<ip_validator>>(
        m, "ip_validator", D(ip_validator))

        .def(py::init<std::string const&>(),
             py::arg("src_addr"),
             D(ip_validator, ip_validator, 0))
        .def(py::init<gr::dtl::ip_validator const&>(),
             py::arg("arg0"),
             D(ip_validator, ip_validator, 1))


        .def("valid",
             &ip_validator::valid,
             py::arg("buf"),
             py::arg("len"),
             D(ip_validator, valid))

        ;


    py::class_<ethernet_validator,
               gr::dtl::packet_validator,
               std::shared_ptr<ethernet_validator>>(
        m, "ethernet_validator", D(ethernet_validator))

        .def(py::init<std::string const&>(),
             py::arg("dst_addr"),
             D(ethernet_validator, ethernet_validator, 0))
        .def(py::init<gr::dtl::ethernet_validator const&>(),
             py::arg("arg0"),
             D(ethernet_validator, ethernet_validator, 1))


        .def("valid",
             &ethernet_validator::valid,
             py::arg("buf"),
             py::arg("len"),
             D(ethernet_validator, valid))

        ;
}
