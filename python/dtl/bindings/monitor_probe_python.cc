/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(monitor_probe.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(67abc9103a884dec22fbeb58e256518b)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/monitor_probe.h>
// pydoc.h is automatically generated in the build directory
#include <monitor_probe_pydoc.h>

void bind_monitor_probe(py::module& m)
{

    using message_sender_base = ::gr::dtl::message_sender_base;
    using message_sender = ::gr::dtl::message_sender;
    using monitor_probe = ::gr::dtl::monitor_probe;


    py::class_<message_sender_base, std::shared_ptr<message_sender_base>>(
        m, "message_sender_base", D(message_sender_base))

     //    .def(py::init<>(), D(message_sender_base, message_sender_base, 0))
     //    .def(py::init<gr::dtl::message_sender_base const&>(),
     //         py::arg("arg0"),
     //         D(message_sender_base, message_sender_base, 1))


        .def("send",
             &message_sender_base::send,
             py::arg("msg"),
             D(message_sender_base, send))

        ;


    py::class_<message_sender,
               gr::dtl::message_sender_base,
               std::shared_ptr<message_sender>>(m, "message_sender", D(message_sender))

        .def(py::init(&message_sender::make),
             py::arg("address"),
             py::arg("bind"),
             D(message_sender, make))


        ;


    py::class_<monitor_probe, gr::block, gr::basic_block, std::shared_ptr<monitor_probe>>(
        m, "monitor_probe", D(monitor_probe))

        .def(py::init(&monitor_probe::make),
             py::arg("name"),
             py::arg("sender"),
             D(monitor_probe, make))


        .def("monitor_msg_handler",
             &monitor_probe::monitor_msg_handler,
             py::arg("msg"),
             D(monitor_probe, monitor_msg_handler))

        ;
}
