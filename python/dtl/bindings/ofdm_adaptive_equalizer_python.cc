/*
 * Copyright 2023 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_adaptive_equalizer.h) */
/* BINDTOOL_HEADER_FILE_HASH(2b292c0bb62bb2b6e033a9798a2ea3fc)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/ofdm_adaptive_equalizer.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_adaptive_equalizer_pydoc.h>

void bind_ofdm_adaptive_equalizer(py::module& m)
{

    using ofdm_adaptive_equalizer_base = ::gr::dtl::ofdm_adaptive_equalizer_base;
    using ofdm_adaptive_equalizer = ::gr::dtl::ofdm_adaptive_equalizer;


    py::class_<ofdm_adaptive_equalizer_base,
               gr::digital::ofdm_equalizer_1d_pilots,
               std::shared_ptr<ofdm_adaptive_equalizer_base>>(
        m, "ofdm_adaptive_equalizer_base", D(ofdm_adaptive_equalizer_base))

     //    .def(py::init<int,
     //                  std::vector<std::vector<int>> const&,
     //                  std::vector<std::vector<int>> const&,
     //                  std::vector<std::vector<std::complex<float>>> const&,
     //                  int,
     //                  bool>(),
     //         py::arg("fft_len"),
     //         py::arg("occupied_carriers"),
     //         py::arg("pilot_carriers"),
     //         py::arg("pilot_symbols"),
     //         py::arg("symbols_skipped"),
     //         py::arg("input_is_shifted"),
     //         D(ofdm_adaptive_equalizer_base, ofdm_adaptive_equalizer_base, 0))
     //    .def(py::init<gr::dtl::ofdm_adaptive_equalizer_base const&>(),
     //         py::arg("arg0"),
     //         D(ofdm_adaptive_equalizer_base, ofdm_adaptive_equalizer_base, 1))


        .def("get_snr",
             &ofdm_adaptive_equalizer_base::get_snr,
             D(ofdm_adaptive_equalizer_base, get_snr))


        .def("get_noise",
             &ofdm_adaptive_equalizer_base::get_noise,
             D(ofdm_adaptive_equalizer_base, get_noise))


        .def("equalize",
             (void(ofdm_adaptive_equalizer_base::*)(
                 gr_complex*,
                 int,
                 std::vector<std::complex<float>> const&,
                 std::vector<gr::tag_t> const&)) &
                 ofdm_adaptive_equalizer_base::equalize,
             py::arg("frame"),
             py::arg("n_sym"),
             py::arg("initial_taps") = std::vector<gr_complex>(),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(ofdm_adaptive_equalizer_base, equalize, 0))


        .def("equalize",
             (void(ofdm_adaptive_equalizer_base::*)(
                 gr_complex*,
                 gr_complex*,
                 int,
                 std::vector<std::complex<float>> const&,
                 std::vector<gr::tag_t> const&)) &
                 ofdm_adaptive_equalizer_base::equalize,
             py::arg("frame"),
             py::arg("frame_soft"),
             py::arg("n_sym"),
             py::arg("initial_taps") = std::vector<gr_complex>(),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(ofdm_adaptive_equalizer_base, equalize, 1))

        ;


    py::class_<ofdm_adaptive_equalizer,
               gr::dtl::ofdm_adaptive_equalizer_base,
               std::shared_ptr<ofdm_adaptive_equalizer>>(
        m, "ofdm_adaptive_equalizer", D(ofdm_adaptive_equalizer))

        .def(py::init(&ofdm_adaptive_equalizer::make),
             py::arg("fft_len"),
             py::arg("constellations"),
             py::arg("snr_est"),
             py::arg("occupied_carriers") = std::vector<std::vector<int>>(),
             py::arg("pilot_carriers") = std::vector<std::vector<int>>(),
             py::arg("pilot_symbols") = std::vector<std::vector<gr_complex>>(),
             py::arg("symbols_skipped") = 0,
             py::arg("alpha") = 0.10000000000000001,
             py::arg("input_is_shifted") = true,
             D(ofdm_adaptive_equalizer, make))


        .def("equalize",
             (void(ofdm_adaptive_equalizer::*)(gr_complex*,
                                               int,
                                               std::vector<std::complex<float>> const&,
                                               std::vector<gr::tag_t> const&)) &
                 ofdm_adaptive_equalizer::equalize,
             py::arg("frame"),
             py::arg("n_sym"),
             py::arg("initial_taps") = std::vector<gr_complex>(),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(ofdm_adaptive_equalizer, equalize, 0))


        .def("equalize",
             (void(ofdm_adaptive_equalizer::*)(gr_complex*,
                                               gr_complex*,
                                               int,
                                               std::vector<std::complex<float>> const&,
                                               std::vector<gr::tag_t> const&)) &
                 ofdm_adaptive_equalizer::equalize,
             py::arg("frame"),
             py::arg("frame_soft"),
             py::arg("n_sym"),
             py::arg("initial_taps") = std::vector<gr_complex>(),
             py::arg("tags") = std::vector<gr::tag_t>(),
             D(ofdm_adaptive_equalizer, equalize, 1))


        .def("get_snr",
             &ofdm_adaptive_equalizer::get_snr,
             D(ofdm_adaptive_equalizer, get_snr))


        .def("get_noise",
             &ofdm_adaptive_equalizer::get_noise,
             D(ofdm_adaptive_equalizer, get_noise))


        ;
}
