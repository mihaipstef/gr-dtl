/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_adaptive_utils.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(f809f566bc98f9cf10cde83b033d1344)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/ofdm_adaptive_utils.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_adaptive_utils_pydoc.h>

void bind_ofdm_adaptive_utils(py::module& m)
{


    py::enum_<::gr::dtl::constellation_type_t>(m, "constellation_type_t")
        .value("UNKNOWN", ::gr::dtl::constellation_type_t::UNKNOWN) // 0
        .value("BPSK", ::gr::dtl::constellation_type_t::BPSK)       // 1
        .value("QPSK", ::gr::dtl::constellation_type_t::QPSK)       // 2
        .value("PSK8", ::gr::dtl::constellation_type_t::PSK8)       // 3
        .value("QAM16", ::gr::dtl::constellation_type_t::QAM16)     // 4
        .export_values();

    py::implicitly_convertible<int, ::gr::dtl::constellation_type_t>();


    m.def("compute_no_of_bits_per_symbol",
          &::gr::dtl::compute_no_of_bits_per_symbol,
          py::arg("constellation"),
          D(compute_no_of_bits_per_symbol));


    m.def("create_constellation",
          &::gr::dtl::create_constellation,
          py::arg("constellation"),
          D(create_constellation));


    m.def("get_constellation_type",
          &::gr::dtl::get_constellation_type,
          py::arg("tags"),
          D(get_constellation_type));


    m.def("get_constellation_tag",
          &::gr::dtl::get_constellation_tag,
          py::arg("tags"),
          D(get_constellation_tag));
}
