/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(ofdm_adaptive_packet_header.h) */
/* BINDTOOL_HEADER_FILE_HASH(5109b4a236bcb05e8c5a7e3697dfc600)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/dtl/ofdm_adaptive_packet_header.h>
// pydoc.h is automatically generated in the build directory
#include <ofdm_adaptive_packet_header_pydoc.h>

void bind_ofdm_adaptive_packet_header(py::module& m)
{

    using ofdm_adaptive_packet_header = ::gr::dtl::ofdm_adaptive_packet_header;


    py::class_<ofdm_adaptive_packet_header,
               gr::digital::packet_header_ofdm,
               std::shared_ptr<ofdm_adaptive_packet_header>>(
        m, "ofdm_adaptive_packet_header", D(ofdm_adaptive_packet_header))

        .def(py::init(&ofdm_adaptive_packet_header::make),
             py::arg("occupied_carriers"),
             py::arg("n_syms"),
             py::arg("len_tag_key"),
             py::arg("frame_len_tag_key"),
             py::arg("num_tag_key"),
             py::arg("bits_per_header_sym"),
             py::arg("bits_per_payload_sym"),
             py::arg("scramble_header"),
             D(ofdm_adaptive_packet_header, make))


        .def("header_formatter",
             &ofdm_adaptive_packet_header::header_formatter,
             py::arg("packet_len"),
             py::arg("out"),
             py::arg("tags"),
             D(ofdm_adaptive_packet_header, header_formatter))


        .def("header_parser",
             &ofdm_adaptive_packet_header::header_parser,
             py::arg("in"),
             py::arg("tags"),
             D(ofdm_adaptive_packet_header, header_parser))

        ;
}
