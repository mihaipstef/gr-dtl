id: dtl_ofdm_adaptive_tx
label: OFDM Adaptive Transmitter
flags: [ python ]
category: '[DTL]'

parameters:
-   id: fft_len
    label: FFT Length
    dtype: int
    default: '64'
-   id: cp_len
    label: Cyclic Prefix Length
    dtype: int
    default: '16'
-   id: occupied_carriers
    label: Occupied Carriers
    dtype: raw
    default: ()
    hide: ${ 'none' if occupied_carriers else 'part' }
-   id: pilot_carriers
    label: Pilot Carriers
    dtype: raw
    default: ()
    hide: ${ 'none' if pilot_carriers else 'part' }
-   id: pilot_symbols
    label: Pilot Symbols
    dtype: raw
    default: ()
    hide: ${ 'none' if pilot_symbols else 'part' }
-   id: rolloff
    label: Rolloff length (samples)
    dtype: int
    default: '0'
-   id: scramble_bits
    label: Scramble Bits
    dtype: enum
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']
-   id: debug
    label: Log Debug Info
    dtype: enum
    default: 'False'
    options: ['False', 'True']
    option_labels: ['No', 'Yes']

asserts:
- ${ fft_len > 0 }
- ${ cp_len > 0Â }
- ${ cp_len < fft_len }
- ${ rolloff >= 0 }

inputs:
-   domain: stream
    dtype: byte
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: complex
-   domain: message
    id: feedback_rcvd

templates:
    imports: from gnuradio import dtl
    make: |-
        dtl.ofdm_adaptive_tx(
            dtl.ofdm_adaptive_tx_config.from_parameters(
            fft_len=${fft_len},
            cp_len=${cp_len},
            % if occupied_carriers:
            occupied_carriers=${occupied_carriers},
            % endif
            % if pilot_carriers:
            pilot_carriers=${pilot_carriers},
            % endif
            % if pilot_carriers:
            pilot_symbols=${pilot_symbols},
            % endif
            rolloff=${rolloff}, 
            debug=${debug},
            scramble_bits=${scramble_bits})
        )
file_format: 1
